//import scala.actors._
//import scala.actors.Actor._

import ddf.minim._;
import ddf.minim.ugens._
 
val minim = new Minim(this.applet)


size(400, 250)
frameRate(30)
smooth()

//make some nodes
val nodes = (1 until 13).map(n => new Node(n * 30 , 125))

//set their left neighbours
nodes.sliding(2).foreach(pair => {
  pair.head.rightNeighbour = pair.last
  pair.last.leftNeighbour = pair.head
})

nodes.head.leftNeighbour = nodes.last
nodes.last.rightNeighbour = nodes.head

var selected = nodes.head

//start the node actors
//nodes.foreach(node => {
//  node.start()
//})

def draw {
  background(40)
  nodes.foreach(node => {
    node.step()
    node.draw(selected == node)
  })
}

override def keyPressed() {
  if(key == CODED) {
    if(keyCode == LEFT) {
      selected = selected.leftNeighbour
    }
    else if(keyCode == RIGHT){
      selected = selected.rightNeighbour
    }
    else if(keyCode == UP){
      selected.push('UP )
    }
    else if(keyCode == DOWN){
      selected.push('DOWN )
    }
  }
}

def stop() = {
  //out.close
  applet.stop()
}

class Node(var x:Int, var y:Int) {//extends Actor{ 
  //spring physics code from http://processing.org/learning/topics/spring.html
  
  // Spring simulation constants
  val M = 1.5       // Mass
  val K = 0.2       // Spring constant
  val D = 0.93      // Decay
  val R = (x, y)    // Rest position  
  
  // Spring simulation variables
  var velocity = (0.0, 0.0)
  var acceleration = (0.0, 0.0)
  var force = (0.0, 0.0);
  var impulse = Array(0.0, 0.0);
  
  //other props
  var size = 15
  var leftNeighbour:Node = _ //you can't just not initialize a var in scala, you need at least _
  var rightNeighbour:Node = _
  
  val rnd = new scala.util.Random
  
  val unotes = List("A4","B4","C4","D4","E4","F4","G4")
  val dnotes = List("A3","B3","C3","D3","E3","F3","G3")
  val out = minim.getLineOut();
  
  def draw(isSelected:Boolean) = {
    noStroke
    if(isSelected){
      fill(255, 0, 0)
    } else {
      fill(255)
    }
    ellipse(x, y, size, size)
  }
  
  def step(){
    var gfy = -K * (y - R._2)
    var gfx = -K * (x - R._1)
    force = (impulse(0) + force._1 + gfx, impulse(1) + gfy) //the individual parts of a tuple are vals. so cant reassign them individuallyy
    //update the acceleration
    acceleration = (force._1 / M, force._2 / M)    
    //update the velocity
    velocity = (D * (velocity._1 + acceleration._1), D * (velocity._2 + acceleration._2))
    //update the position
    x = (x + velocity._1).toInt
    y = (y + velocity._2).toInt
    
    impulse(0) *= (D / 2)
    impulse(1) *= (D / 2)
  }
  
  //
  //We can replace this with the more generic resuable version
  //below
  //
  // var lastCalled = System.currentTimeMillis();
  //   def onlyAfter(time:Int, function: () => Unit):Unit = {
  //     if((System.currentTimeMillis() - lastCalled) > time){
  //       function()
  //       lastCalled = System.currentTimeMillis()
  //     }
  //   }
  
  //basically returns a function that captures the lastCalled var
  //we can have as many devouncers as we want without having to explicitly
  //manage a map of timers to track when the functions they watch over were
  //last called
  def makeDebouncer():Function2[Int, () => Unit,Unit] = {
    return new Function2[Int, () => Unit,Unit]() {
      var lastCalled = System.currentTimeMillis();
      
      def apply(time:Int, function: () => Unit):Unit = {
        if((System.currentTimeMillis() - lastCalled) > time) {
          function()
          lastCalled = System.currentTimeMillis()
        }
      }
    }
  }
  
  val onlyAfter = makeDebouncer()
  
  def push(direction:Symbol, amount:Float = 20.0):Unit = {
    onlyAfter(1500, () => {
      val notes = if(direction == 'UP ) unotes else dnotes
      //out.playNote( 2.0, 1.9, "E3" );
      out.playNote( 0.0, 0.8, util.Random.shuffle(notes).head)
    })
    
    direction match {
      case 'UP => {
        impulse(1) -= amount
      }
      case 'DOWN => {
        impulse(1) += amount
      }
    }
    if(amount > 0.25){
       val t = new Thread() {
        override def run() {
          Thread.sleep(rnd.nextInt(600))
          rightNeighbour.push(direction, (amount / 2.5).toFloat) //the division returns a double
          leftNeighbour.push(direction, (amount / 2.0).toFloat) 
        }
      }
      t.start()
    }
  }
  /*
  def act() = {
    loop {
      react {
        case (direction:Symbol, amount:Float) => {
          Thread.sleep(rnd.nextInt(600))
          this ! push(direction, amount)
        }
      }
    }
  }
  */
  
}